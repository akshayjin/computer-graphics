#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass IEEEtran
\begin_preamble
% for subfigures/subtables
\ifCLASSOPTIONcompsoc
\usepackage[caption=false,font=normalsize,labelfont=sf,textfont=sf]{subfig}
\else
\usepackage[caption=false,font=footnotesize]{subfig}
\fi
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding default
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement tbh
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "Your Title"
\pdf_author "Your Name"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle false
\pdf_quoted_options "pdfpagelayout=OneColumn, pdfnewwindow=true, pdfstartview=XYZ, plainpages=false"
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 0
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 2
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Report: Multiscale Visualization Using Data Cubes
\end_layout

\begin_layout Author
Akshay
\begin_inset space ~
\end_inset

Jindal,
\begin_inset space ~
\end_inset


\begin_inset Flex IEEE membership
status open

\begin_layout Plain Layout
IMT2012002
\end_layout

\end_inset

 
\end_layout

\begin_layout Page headings
CS855: Data Visualization (Assignment 5)
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}{
\end_layout

\end_inset


\end_layout

\begin_layout Abstract
This report is summary of the seminal paper by Chris Stolte, Diane Tang
 and Pat Hanrahan which presents a formal way of multiscale visualization
 of data cubes with both data and visual abstraction and multiple zooming
 paths.
 They also provide four design patterns using their formalism for better
 understanding.
\end_layout

\begin_layout Keywords
cartography,zoom graph, design pattern, multiscale visualization, data cubes
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
The 
\series bold

\backslash
IEEEPARstart
\series default
 command is needed in the first paragraph of the document.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
IEEEPARstart{
\end_layout

\end_inset

T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}{
\end_layout

\end_inset

he
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 common process of exploring large datasets is 
\begin_inset Quotes eld
\end_inset

Overview first, zoom and filter, then details-on demand
\begin_inset Quotes erd
\end_inset

.
 As the user zooms, the data density decreases and thus more detailed representa
tions of individual data points can be shown.
 The paper presents a system for describing and developing multiscale visualizat
ions that support multiple zoom paths and both data and visual abstraction.
 Combining this general mechanism for performing meaningful data abstraction
 with traditional visual abstraction techniques enhances our ability to
 generate abstract views of large data sets, a difficult and challenging
 problem.
 They present zoom graphs as a formal representation of their generalization
 and four design patterns that capture the critical structure of commonly
 used multiscale visualizations.
\begin_inset CommandInset citation
LatexCommand cite
key "datacube"

\end_inset


\end_layout

\begin_layout Section
Related Work
\end_layout

\begin_layout Standard
Multiscale visualization is common in cartography.
 It involves selecting necessary features (data abstraction) and simplifying
 the visual representations of the selected features.
 Some tools which provides multiscale visualization (and their limitations)
 are:
\end_layout

\begin_layout Enumerate
The Pad series(Pad++ and Jazz): Focuses on interaction and applying visual
 abstractions for “semantic zooming” rather than easily applying data abstractio
ns
\end_layout

\begin_layout Enumerate
DataSplash: Does not provide mechanisms for zooming on tables or small multiples
 of graphs, nor does it provide for multiple zooming paths on a single graph.
\end_layout

\begin_layout Enumerate
XmdvTool: Limited to data abstraction, does not provide visual abstraction
 capabilities.
\end_layout

\begin_layout Enumerate
ADVIZOR system: Multiple visual metaphors, each with a single zoom path
 based on with the visual and data abstractions given in the survey by Eick
 and Karr.
 Does not provide a system for exploring other types of zooms nor a formal
 notation for describing multiscale visualizations.
\begin_inset CommandInset citation
LatexCommand cite
key "datacube"

\end_inset


\end_layout

\begin_layout Section
Methodology
\end_layout

\begin_layout Subsection
Formalism
\end_layout

\begin_layout Standard
Rather than considering multiscale visualizations as simply a series of
 linear zooms, they think of multiscale visualizations as a graph, where
 each node corresponds to a particular set of data and visual abstractions
 and each edge is a zoom.
 Zooming in a multiscale visualization is same as traversing this graph.
 The two technologies they use for data abstraction and visual abstraction
 are:
\end_layout

\begin_layout Enumerate
Data cubes (data abstraction): Rather than arbitrary summarizations, data
 cubes quickly provide summaries of the underlying data at different meaningful
 levels of detail.
 Data cubes categorize information into two classes: dimensions and measures,
 corresponding to the independent and dependent variables, respectively.
 If each dimension has a hierarchical structure, then the data must be structure
d as a lattice of data cubes, where each cube is defined by the combination
 of a level of detail for each dimension.
 Specifying the level of detail identifies the cube in the lattice, while
 the relevant dimensions identifies which projection (from n dimensions
 down to the number of relevant dimensions) of that cube is needed.
 
\end_layout

\begin_layout Enumerate
Polaris (visual abstraction): They use a formal specification language for
 describing table-based visualizations, to describe a node within the zoom
 graph identifying a multiscale visualization.
 A Polaris specification uses a formal table algebra to specify the table
 configuration of the visualization.
 The four types of operators in this algebra, in order of precedence are:
\end_layout

\begin_deeper
\begin_layout Enumerate
dot (.) : specifies the desired level of detail within a dimensional hierarchy.
\end_layout

\begin_layout Enumerate
cross (x) and nest (/): The cross and nest operator behave like a cross-product
 of two vectors (nest only produces pairs for which data exist)
\end_layout

\begin_layout Enumerate
concatenate (+): yields the union of two sets.
\begin_inset Newline newline
\end_inset

The other four portions of Polaris specification are: table structure, internal
 level of detail, mapping of data sources to layers, visual representation
 for tuples,
\end_layout

\end_deeper
\begin_layout Standard
Finally, using the above two technologies, they present a zoom graph.
 Each node in a zoom graph is abstractly described using a Polaris specification.
 Edges and Interactions are written as a script.
\begin_inset CommandInset citation
LatexCommand cite
key "datacube"

\end_inset


\end_layout

\begin_layout Subsection
Design Patterns
\begin_inset CommandInset citation
LatexCommand cite
key "datacube"

\end_inset


\end_layout

\begin_layout Subsubsection
Chart Stacks
\end_layout

\begin_layout Standard
This first pattern applies when analysts are trying to understand how a
 dependent measure varies with two independent hierarchical ordinal dimensions,
 one derived from continuous data (such as time).T he main thing to note
 in this pattern is that the analyst can independently zoom along either
 the x- or y-axis, leading to a graph describing the multiscale visualization.
\end_layout

\begin_layout Subsubsection
Thematic Maps
\end_layout

\begin_layout Standard
This pattern is applicable when visualizing geographically varying dependent
 measures that can be summarized at multiple geographic levels of detail
 (such as county or state).
 Thus, the data contains an ordinal dimension hierarchy that characterizes
 the geographic levels of detail, two independent spatial dimensions (e.g.,
 latitude and longitude), and some number of dependent measures.
 Zooming in this pattern is like a fly-through as the user must zoom on
 both axis simultaneously.
\end_layout

\begin_layout Subsubsection
Dependent Quantitative-Dependent Quantitative Scatterplots
\end_layout

\begin_layout Standard
This pattern is very similar to the previous pattern in that the main visualizat
ion again has two quantitative axes.
 However, the primary distinction between the two patterns is that in this
 pattern, the axes have no inherent mapping to the physical world; instead,
 they spatially encode an abstract quantity, thus freeing many constraints
 imposed in the previous pattern.
 Thus, the data used in this type of visualization can be any set of abstract
 measurements that can be categorized according to some set of hierarchies.
 Many corporate data warehouses fall into this category.
\end_layout

\begin_layout Subsubsection
Matrices
\end_layout

\begin_layout Standard
Our final pattern applies when the analyst is exploring how a dependent
 measure varies with the values of two independent dimension hierarchies.
 This type of data can be effectively visualized as a table, where the rows
 encode one hierarchy while the columns encode a different hierarchy and
 a glyph in each cell depicts the measure.The zooms are changes in the data
 abstraction.
\end_layout

\begin_layout Section
Impact and Future Work
\end_layout

\begin_layout Standard
Unlike its predecessors, the proposed model performs both data and visual
 abstraction using general mechanisms.
 And considering how many large and important data sets are already stored
 in relational databases and data cubes, their model can be easily generalized
 over different datasets.
\end_layout

\begin_layout Standard
Some limitations that needs to be addressed are 
\begin_inset CommandInset citation
LatexCommand cite
key "datacube"

\end_inset

:
\end_layout

\begin_layout Enumerate
It is complicated to construct continuous zooms into the data.
\end_layout

\begin_layout Enumerate
It doesn’t allow pivoting during a zoom.
\end_layout

\begin_layout Enumerate
It restrict zooms to always follow the same linear hierarchy rather than
 allowing arbitrary branching hierarchies.
\end_layout

\begin_layout Enumerate
It cannot visualize very large datasets in real-time.
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "ass5"
options "plain"

\end_inset


\end_layout

\end_body
\end_document
